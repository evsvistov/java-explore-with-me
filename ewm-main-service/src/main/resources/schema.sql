-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  VARCHAR(250) NOT NULL,
    email VARCHAR(254) NOT NULL UNIQUE
);

-- Таблица категорий
CREATE TABLE IF NOT EXISTS categories
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);
-- Таблица локаций
CREATE TABLE IF NOT EXISTS location
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    varchar(1000),
    lat     float8 NOT NULL,
    lon     float8 NOT NULL,
    radius  float8
);

-- Таблица событий
CREATE TABLE IF NOT EXISTS events
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation         VARCHAR(2000)            NOT NULL,
    category_id        BIGINT                   NOT NULL,
    confirmed_requests INTEGER   DEFAULT 0,
    created_on         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    description        TEXT                     NOT NULL,
    event_date         TIMESTAMP WITH TIME ZONE NOT NULL,
    initiator_id       BIGINT                   NOT NULL,
    location_id        BIGINT                   NOT NULL,
    paid               BOOLEAN                  NOT NULL,
    participant_limit  INTEGER   DEFAULT 0,
    published_on       TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOLEAN   DEFAULT TRUE,
    state              VARCHAR(10)              NOT NULL CHECK (state IN ('PENDING', 'PUBLISHED', 'CANCELED')),
    title              VARCHAR(120)             NOT NULL,
    views              BIGINT    DEFAULT 0,
    FOREIGN KEY (location_id) REFERENCES location (id),
    FOREIGN KEY (category_id) REFERENCES categories (id),
    FOREIGN KEY (initiator_id) REFERENCES users (id)
);

-- Таблица подборок событий
CREATE TABLE IF NOT EXISTS compilations
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title  VARCHAR(50) NOT NULL,
    pinned BOOLEAN     NOT NULL
);

-- Таблица для связи подборок событий и событий
CREATE TABLE IF NOT EXISTS compilation_events
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    compilation_id BIGINT NOT NULL,
    event_id       BIGINT NOT NULL,
    FOREIGN KEY (compilation_id) REFERENCES compilations (id),
    FOREIGN KEY (event_id) REFERENCES events (id),
    UNIQUE (compilation_id, event_id)
);

-- Таблица заявок на участие
CREATE TABLE IF NOT EXISTS participation_requests
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created      TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_id     BIGINT                      NOT NULL,
    requester_id BIGINT                      NOT NULL,
    status       VARCHAR(20)                 NOT NULL CHECK (status IN ('PENDING', 'CONFIRMED', 'REJECTED', 'CANCELED')),
    FOREIGN KEY (event_id) REFERENCES events (id),
    FOREIGN KEY (requester_id) REFERENCES users (id),
    UNIQUE (event_id, requester_id)
);

-- Функция для вычисления дистанции между двумя точками
CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist      float = 0;
        rad_lat1  float;
        rad_lat2  float;
        theta     float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * theta / 180;
            -- находим длину ортодромии
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN
                dist = 1;
            END IF;

            dist = acos(dist);
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;'
    LANGUAGE plpgsql;
